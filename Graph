Graph (Non-linear Network) 🌐
🧠 Logic:A Graph is a non-linear data structure used to represent a network of connected entities. A graph consists of a finite set of ordered pairs, called Edges (E), which connect a set of entities, called Vertices (V) or Nodes.Graphs are used to model real-world problems like road networks, social networks, and dependencies.Key types:Undirected Graph: Edges have no direction (A-B is the same as B-A).Directed Graph (Digraph): Edges have a direction (A $\rightarrow$ B is not the same as B $\rightarrow$ A).Common Representations: Adjacency Matrix (2D array) or Adjacency List (Array of Linked Lists/ArrayLists).📌 Example (Directed Graph):Vertices (V): {A, B, C, D}
Edges (E): {(A, B), (B, C), (C, A), (C, D)}

// Representation:
// A -> B
// B -> C
// C -> A, C -> D
🤹‍♀️ Java Code (Adjacency List Representation):Javaimport java.util.ArrayList;

class Graph {
    int V; // Number of vertices
    ArrayList<ArrayList<Integer>> adj; // Adjacency List

    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }

    // Add edge from u to v
    void addEdge(int u, int v) {
        adj.get(u).add(v); // For Directed Graph
        // For Undirected, also add: adj.get(v).add(u);
    }
}

public class GraphDemo {
    public static void main(String[] args) {
        Graph g = new Graph(4); // 4 vertices (0, 1, 2, 3)
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 3);

        // Output: 0 is connected to 1 and 2
        System.out.println("Node 0 is connected to: " + g.adj.get(0)); 
    }
}
🧾 Notebook Points:Java📘 Graph:
→ Non-linear structure (network)
→ Components: Vertices (Nodes) and Edges (Connections)

🔢 Representation: Adjacency Matrix or Adjacency List (Common in DSA)
✅ Summary Table:🏗️ Topic💡 Core Concept⏱️ Avg. Time Complexity🛠️ ImplementationQuick SortDivide and Conquer (Partitioning)O($n \log n$)In-place, RecursiveGraphNetwork modelVaries based on problemAdjacency List/Matrix
