DSA-0241. Quick Sort (Partitioning Sort) ðŸš€
ðŸ§  Logic:Quick Sort is a highly efficient, comparison-based algorithm that also uses the Divide and Conquer strategy. It is generally preferred over Merge Sort for arrays due to its excellent performance and $\mathbf{O(\log n)}$ space complexity in the average case.The main idea is:Choose a Pivot: Select an element (the pivot) from the array.Partition: Rearrange the elements so that elements $\mathbf{less~than~the~pivot}$ are on the left, and elements $\mathbf{greater~than~the~pivot}$ are on the right. The pivot is now in its correct sorted position.Recurse: Recursively apply the process to the sub-arrays to the left and right of the pivot.Quick Sort is an $\mathbf{In-place}$ algorithm but is generally $\mathbf{Unstable}$.ðŸ“Œ Example (Pivot = 8):List: [10, 8, 4, 1, 5]

1. Choose Pivot (8).
2. Partition: Move elements smaller than 8 to the left.
   Result: [1, 4, 5, 8, 10] (8 is now in its correct place)
3. Recurse on [1, 4, 5] and [10].
ðŸ”¤ Java Code (Conceptual Quick Sort):Javapublic class QuickSort {
    // Main function to call quick sort
    public static void sort(int[] arr, int low, int high) {
        if (low < high) {
            // pi is partitioning index, arr[pi] is now at right place
            int pi = partition(arr, low, high);

            // Recursively sort elements before partition and after partition
            sort(arr, low, pi - 1);
            sort(arr, pi + 1, high);
        }
    }

    // This function takes last element as pivot, places the pivot element at its correct position
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; 
        int i = (low - 1); // Index of smaller element

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and arr[high] (pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    public static void main(String[] args) {
        int[] data = {10, 80, 30, 90, 40};
        sort(data, 0, data.length - 1);
        // Output: 10 30 40 80 90
        for (int val : data) System.out.print(val + " "); 
    }
}
ðŸ§¾ Notebook Points:Java
